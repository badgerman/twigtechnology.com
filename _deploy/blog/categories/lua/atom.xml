<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lua | Twig Technology]]></title>
  <link href="http://www.twigtechnology.com/blog/categories/lua/atom.xml" rel="self"/>
  <link href="http://www.twigtechnology.com/"/>
  <updated>2014-04-11T07:44:23+02:00</updated>
  <id>http://www.twigtechnology.com/</id>
  <author>
    <name><![CDATA[Enno Rehling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tolua: The Specified Procedure Could Not Be Found.]]></title>
    <link href="http://www.twigtechnology.com/blog/2012/02/05/tolua-the-specified-procedure-could-not-be-found/"/>
    <updated>2012-02-05T14:02:00+01:00</updated>
    <id>http://www.twigtechnology.com/blog/2012/02/05/tolua-the-specified-procedure-could-not-be-found</id>
    <content type="html"><![CDATA[<p>Today I was going to make a tiny DLL that binds some C code with
tolua++, and I ran into this error message:</p>

<pre><code>lua: error loading module .foo. from file .daisy\debug\foo.dll.:

    The specified procedure could not be found.
</code></pre>

<!-- more -->


<p>That looks like my DLL is not exporting the luaopen_foo
function correctly. That is the function lua calls to initialize the
package it just opened, and tolua++ was not declaring it properly:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">TOLUA_API</span> <span class="kt">int</span> <span class="nf">luaopen_foo</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">tolua_S</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">tolua_foo_open</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
TOLUA_API is defined toextern, which doesn.t mean that it will be
exported by the DLL, because on windows, the magic incantation for
that is__declspec(dllexport). The tolua++ header has no special
treatment for Windows, so I.m guessing that problem has just never
come up for them.</p>

<p>Once the problem is understood, the solution is easy: I added another
function to dllmain.cpp that has the correct export declaration and
calls the generated one.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">extern</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">C</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">tolua_bar_open</span><span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">__declspec</span><span class="p">(</span><span class="n">dllexport</span><span class="p">)</span> <span class="n">luaopen_foo</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tolua_bar_open</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>    <br/>
There is one caveat, because tolua++ has already created a
function named luaopen_foo, so I had to tell it to name things
differently, for which there is a command-line argument:</p>

<pre><code>tolua++ -n bar foo.pkg &gt; foo.c
</code></pre>
]]></content>
  </entry>
  
</feed>
